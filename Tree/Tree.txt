트리
    데이터 상 하 관계를 저장하는 자료 구조  (계층적 관계)
    컴퓨터 폴더, 클래스 상속 관계는 계층적 관계

    배열, 링크드 리스트는 선형적 자료 구조
    해시 테이블은 데이터 관계 저장 X

    root 노드 : 트리의 시작 노드
    부모 노드 : 특정 노드의 직속 상위 노드
    자식 노드 : 특정 노드의 직속 하위 노드
    형제 노드 : 같은 부모의 노드
    leaf 노드 : 가장 말단 노드
    깊이 : 특정 노드가 root 노드에서 떨어져 있는 거리
    레벨 : 깊이 + 1
    높이 : 가장 깊은 노드의 깊이
    부분 트리 : 트리의 일부분

    트리의 활용
        1) 컴퓨터 과학의 다양한 문제들을 기발하게 해결
            정렬, 압축
        2) 다양한 추상 자료형 구현
            딕셔너리, 세트, 우선순위 큐

    이진 트리 : 자식 노드가 최대 2개

    정 이진 트리 (Full Binary Tree)
        모든 노드가 2개 또는 0개의 자식 갖는 이진 트리

    완전 이진 트리 (Complete Binary Tree)
        마지막 레벨을 제외한 모든 레벨이 차 있고,
        마지막 레벨은 왼쪽에서 오른쪽으로 차 있는 이진 트리

        노드 n개 -> 높이 lg(n) 에 비례 (수학적 접근 필요)

        보통 배열이나 리스트로 구현

    포화 이진 트리 (Perfect Binary Tree)
        모든 레벨이 빠짐없이 다 노드로 채워져 있는 이진 트리
        정 이진 트리 + 완전 이진 트리


    순회
        자료 구조에 저장된 모든 데이터를 노든 것 (출력하는 예시)

    트리 순회
        반복문 대신 재귀 많이 사용
        전체 트리 대신 부분 트리 순회

        노드들 사이에 선형적 순서 만들 수 있음
        특정 순회 동작으로 트리에 선형적 관계를 집어 넣을 수 있음

       기본 동작
            재귀적으로 왼쪽 부분 트리 순회
            재귀적으로 오른족 부분 트리 순회
            현재 노드 데이터 출력

    pre-order 순회    (부분 트리 순회 전에 현재 노드 출력)
        1. 현재 노드 데이터 출력
        2. 재귀적 왼쪽 부분트리 순회
        3. 재귀적 오른쪽 부분트리 순회
        의 순서

        root 부터 왼쪽 자식 쭉 출력, 오른쪽 자식 하나씩 옮겨서 왼쪽 자식 쭉 출력 ...

    post-order 순회   (부분 트리 순회 후에 현재 노드 출력)
        1. 재귀적 왼쪽 부분트리 순회
        2. 재귀적 오른쪽 부분트리 순회
        3. 현재 노드 데이터 출력

        왼쪽 부분트리 말단 노드 출력, 그 노드의 부모 노드 출력 ...
        오른쪽 "

    in-order 순회     (부분 트리 순회 사이에 현재 노드 출력)
        1. 재귀적 왼쪽 부분트리 순회
        2. 현재 노드 데이터 출력
        3. 재귀적 오른쪽 부분트리 순회

        다이어그램으로 보면 왼쪽부터 출력

    힙
        형태 속성 : 완전 이진 트리
        힙 속성 : 모든 노드 데이터는 자식 노드들의 데이터보다 크거나 같다

        완전 이진 트리이므로 리스트(동적 배열) 로 구현현

        활용
            힙 정렬
                가장 큰 노드와 부모 노드를 바꿈 (heapify)
                    특정 노드 기준으로 해당 노드와 자식 노드를 비교하여 제일 큰 수를 가지고 있는 노드를 찾는다
                    제일 큰 수를 가진 노드가 자식 노드일 경우
                        해당 자식 노드의 값과 부모 노드의 값을 바꾸고,
                        제일 큰 수를 가지고 있던 자식 노드에 heapify를 수행한다 (재귀 반복)

                    노드 갯수 n 개일 때 최악의 경우 트리의 높이만큼 내려감 O(lg(n))

                마지막 인덱스부터 처음 인덱스까지 heapify 를 호출할 경우
                자식 인덱스의 부분트리는 힙 속성을 지킨다 O(n)

                총 시간복잡도 O(nlg(n))

                힙 속성 자체는 정렬 속성이 없다

                힙 오름차순 정렬
                    힙 속성을 만족하는 트리에서 루트 노드 값과 제일 뒤에 있는 노드의 값을 바꾼다
                    (제일 뒤에 있는 노드의 값은 트리에서 제일 큰 값)
                    제일 뒤에 있는 노드를 트리에서 제외하고 루트 노드에서 heapify 수행한다
                    (제일 뒤에 있는 노드를 제외했으므로 루트 노드의 자식 노드는 힙 속성을 만족한다)
                    위의 과정을 반복한다
                    결국 트리가 오름차순으로 정렬된다

                힙 내림차순 정렬
                    힙 속성을 반대로 바꾸고 똑같은 알고리즘 적용