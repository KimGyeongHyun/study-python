트리
    데이터 상 하 관계를 저장하는 자료 구조  (계층적 관계)
    컴퓨터 폴더, 클래스 상속 관계는 계층적 관계

    배열, 링크드 리스트는 선형적 자료 구조
    해시 테이블은 데이터 관계 저장 X

    root 노드 : 트리의 시작 노드
    부모 노드 : 특정 노드의 직속 상위 노드
    자식 노드 : 특정 노드의 직속 하위 노드
    형제 노드 : 같은 부모의 노드
    leaf 노드 : 가장 말단 노드
    깊이 : 특정 노드가 root 노드에서 떨어져 있는 거리
    레벨 : 깊이 + 1
    높이 : 가장 깊은 노드의 깊이
    부분 트리 : 트리의 일부분

    트리의 활용
        1) 컴퓨터 과학의 다양한 문제들을 기발하게 해결
            정렬, 압축
        2) 다양한 추상 자료형 구현
            딕셔너리, 세트, 우선순위 큐

    이진 트리 : 자식 노드가 최대 2개

    정 이진 트리 (Full Binary Tree)
        모든 노드가 2개 또는 0개의 자식 갖는 이진 트리

    완전 이진 트리 (Complete Binary Tree)
        마지막 레벨을 제외한 모든 레벨이 차 있고,
        마지막 레벨은 왼쪽에서 오른쪽으로 차 있는 이진 트리

        노드 n개 -> 높이 lg(n) 에 비례 (수학적 접근 필요)

        보통 배열이나 리스트로 구현

    포화 이진 트리 (Perfect Binary Tree)
        모든 레벨이 빠짐없이 다 노드로 채워져 있는 이진 트리
        정 이진 트리 + 완전 이진 트리


    순회
        자료 구조에 저장된 모든 데이터를 노든 것 (출력하는 예시)

    트리 순회
        반복문 대신 재귀 많이 사용
        전체 트리 대신 부분 트리 순회

        노드들 사이에 선형적 순서 만들 수 있음
        특정 순회 동작으로 트리에 선형적 관계를 집어 넣을 수 있음

       기본 동작
            재귀적으로 왼쪽 부분 트리 순회
            재귀적으로 오른족 부분 트리 순회
            현재 노드 데이터 출력

    pre-order 순회    (부분 트리 순회 전에 현재 노드 출력)
        1. 현재 노드 데이터 출력
        2. 재귀적 왼쪽 부분트리 순회
        3. 재귀적 오른쪽 부분트리 순회
        의 순서

        root 부터 왼쪽 자식 쭉 출력, 오른쪽 자식 하나씩 옮겨서 왼쪽 자식 쭉 출력 ...

    post-order 순회   (부분 트리 순회 후에 현재 노드 출력)
        1. 재귀적 왼쪽 부분트리 순회
        2. 재귀적 오른쪽 부분트리 순회
        3. 현재 노드 데이터 출력

        왼쪽 부분트리 말단 노드 출력, 그 노드의 부모 노드 출력 ...
        오른쪽 "

    in-order 순회     (부분 트리 순회 사이에 현재 노드 출력)
        1. 재귀적 왼쪽 부분트리 순회
        2. 현재 노드 데이터 출력
        3. 재귀적 오른쪽 부분트리 순회

        다이어그램으로 보면 왼쪽부터 출력

    힙
        형태 속성 : 완전 이진 트리
        힙 속성 : 모든 노드 데이터는 자식 노드들의 데이터보다 크거나 같다

        완전 이진 트리이므로 리스트(동적 배열) 로 구현현

        활용
            힙 정렬
                가장 큰 노드와 부모 노드를 바꿈 (heapify)
                    특정 노드 기준으로 해당 노드와 자식 노드를 비교하여 제일 큰 수를 가지고 있는 노드를 찾는다
                    제일 큰 수를 가진 노드가 자식 노드일 경우
                        해당 자식 노드의 값과 부모 노드의 값을 바꾸고,
                        제일 큰 수를 가지고 있던 자식 노드에 heapify를 수행한다 (재귀 반복)

                    노드 갯수 n 개일 때 최악의 경우 트리의 높이만큼 내려감 O(lg(n))

                마지막 인덱스부터 처음 인덱스까지 heapify 를 호출할 경우
                자식 인덱스의 부분트리는 힙 속성을 지킨다 O(n)

                총 시간복잡도 O(nlg(n))

                힙 속성 자체는 정렬 속성이 없다

                힙 오름차순 정렬
                    힙 속성을 만족하는 트리에서 루트 노드 값과 제일 뒤에 있는 노드의 값을 바꾼다
                    (제일 뒤에 있는 노드의 값은 트리에서 제일 큰 값)
                    제일 뒤에 있는 노드를 트리에서 제외하고 루트 노드에서 heapify 수행한다
                    (제일 뒤에 있는 노드를 제외했으므로 루트 노드의 자식 노드는 힙 속성을 만족한다)
                    위의 과정을 반복한다
                    결국 트리가 오름차순으로 정렬된다

                힙 내림차순 정렬
                    힙 속성을 반대로 바꾸고 똑같은 알고리즘 적용

                1. 리스트를 힙으로 만듦  O(nlg(n))
                2. root 노드, 마지막 노드 위치 바꿈 O(1)
                3. 새로운 root 노드 heapify O(lg(n))
                4. 힙에 남아있는 노드가 없도록 2~3단계 반복 O(nlg(n))
                총 O(nlg(n))

                선택 정렬 O(n^2)
                삽입 정렬 O(n^2)
                합병 정렬 O(nlg(n))
                퀵 정렬 평균 O(nlg(n)) 최악 O(n^2)
                힙 정렬 O(nlg(n))

                합병, 퀵 정렬과 비슷한 성능을 냄

            우선순위 큐
                추상 자료형
                데이터 지정 가능
                큐의 FIFO 방식대신 우선순위 순서대로 나온다
                (데이터의 저장 순서는 알 필요 없음)

                힙을 이용하면 효율적으로 구현 가능 (삽입과 추출)

                힙 데이터 삽입
                    1. 마지막에 삽입  O(1)
                    2. 삽입 데이터, 부모 데이터 비교, 위치 바꿈 O(1)
                        heapify 역순
                        heapify가 부모에서 자식으로 간다면, 이 과정은 자식에서 부모로 감
                    3. 2 반복 O(lg(n))

                    총 시간복잡도 O(lg(n))

                힙에서 root 노드 데이터 추출 (pop)
                    (우선순위 큐 사용을 위해) 우선순위대로 힙을 뒀다고 가정
                    1. 루트 노드와 마지막 노드의 데이터 변경 O(1)
                    2. 마지막 노드 데이터 임시 저장, 마지막 노드 삭제 O(1)
                    3. root 노드 heapify 수행 O(lg(n))
                    4. 임시 저장된 데이터 리턴 O(1)
                    총 시간복잡도 O(lg(n))

                정렬된 동적 배열과, 정렬된 더블리 링크드 리스트로도 구현 가능

                정렬된 동적 배열의 경우 삽입, 추출 후에도 정렬된 상태 유지하면 됨
                삽입
                    1. 새로운 데이터가 들어갈 위치 찾기 이진 탐색 O(lg(n))
                    2. 데이터 넣기 O(n)
                    총 시간복잡도 O(n)
                추출
                    마지막 데이터 삭제, 리턴 O(1)
                    총 시간복잡도 O(1)

                정렬된 더블리 링크드 리스트의 경우
                삽입 O(n), 삭제 마지막 데이터 추출 O(1)

                결국 동적 배열과, 더블리 링크드 리스트는 삽입에서 n, 추출에서 1
                힙은 삽입에서 lg(n), 추출에서 lg(n) 의 시간복잡도 가짐

                데이터 삽입이 많을 경우 힙, 추출할 땐 다른 추상 자료형 사용하기


    이진 탐색 트리 (Binary search tree)

        특정 노드 기준 왼쪽 부분트리의 모든 노드는 값이 작아야 하고 오른쪽은 커야 한다
        
        특정 값을 찾을 때 루트부터 크고 작음을 판별해서 내려감
       
        in-order 순회를 통해 정렬된 값을 출력
       
        삽입
            트리 높이 :  h
            1. 새로운 노드 생성 O(1)
            2. 루트 노드부터 비교하면서 저장할 위치 찾음 O(h)
            3. 찾은 위치에 새롭게 만든 노드 연결 O(1)
            총 시간복잡도 O(h)
           
        탐색
            1. 주어진 노드의 데이터와 탐색하려는 데이터 비교
            2. 크기 비교 후 이동
            3. 1, 2단계 반복
            4. 해당 노드 찾으면 리턴
            총 시간복잡도 O(h)

        제일 작은 수는 삽입과정을 생각하면 왼쪽 자식 맨 밑의 노드임

        삭제
            1. 삭제하려는 노드 찾음 (탐색연산)
            2.
                1) 지우려는 노드가 leaf 노드일 경우
                    1. 해당 노드 None 설정 O(1)
                2) " 하나의 자식 노드만 있는 경우
                    1. 해당 노드를 자식 노드로 변경
                    2. 바뀐 노드의 부모노드를 해당 노드의 부모 노드로 변경 O(1)
                3) " 두 개의 자식이 있는 경우
                    1. 지우려는 노드의 오른쪽 자식 트리에서 가장 작은 노드 찾기
                        successor : 어떤 노드보다 큰 노드 중 가장 작은 노드
                        지우려는 노드의 오른쪽 자식 트리에 노드가 하나 뿐이라면
                        예외적으로 successor 는 부모의 오른쪽 자식임
                        find min 의 시간복잡도 때문에 O(h)
                    2. 지우려는 노드 데이터를 successor 데이터로 변경 O(h)
                    3. successor 노드 삭제 O(1)
                    총 O(h)
                    
        탐색 + 삭제의 모든 경우는 O(h)
        탐색, 삽입, 삭제는 O(h)
        즉 노드 갯수가 아닌 트리 높이가 낮을 수록 연산 빠름
        이진 탐색 트리는 완전 이진 트리가 아닐 수 있기 때문에
        노드 개수가 n이라면 높이가 lg(n)이라고 볼 수 없다
        (균형잡힌 트리)
        최악의 경우 h = n 처럼 치우칠 수 있음
        평균적으로 lg(n)이지만 균형을 잃을 수 있다
        그러므로 보통 연산들의 시간복잡도는 n으로 표현하는 대신
        O(h)로 간단하게 표현
        
        이진 탐색 트리로 추상자료형 딕셔너리 구현
            기존 data 대신 key로 노드 탐색, 삽입, 삭제
            value도 추가
            위의 2개 말고 달라지는 건 없음
            시간복잡도 변화 없음
            
        해시 테이블과의 비교
            이진 탐색 트리의 탐색, 삽입, 삭제 평균 O(lg(n)) 최악 O(n)
            해시 테이블의 탐색, 삽입, 삭제 평균 O(1) 최악 O(n)
            연산량은 해시 테이블이 효율적임
            하지만 이진 탐색 트리는 데이터 간 순서도 저장하는 자료구조
            해시 테이블은 데이터간 순서 저장 불가
            즉 key를 정렬해서 사용하려면 이진 탐색 트리,
            그 외에는 해시 테이블 사용하기
             